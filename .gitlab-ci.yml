You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - build
  - test
  - security
  - deploy
build-job:
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."
unit-test-job:
  stage: test
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"
lint-test-job:
  stage: test
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."
prisma-cloud:
  stage: security
  allow_failure: true
  variables:
    PRISMA_API_URL: https://api4.prismacloud.io/
  image:
    name: bridgecrew/checkov:latest
    entrypoint:
      - "/usr/bin/env"
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  rules:
    - if: "$SAST_DISABLED"
      when: never
    - if: "$CI_COMMIT_BRANCH"
      exists:
        - "**/*.yml"
        - "**/*.yaml"
        - "**/*.json"
        - "**/*.template"
        - "**/*.tf"
        - "**/serverless.yml"
        - "**/serverless.yaml"
  script:
    - checkov -d . --bc-api-key $PRISMA_ACCESS_KEY::$PRISMA_SECRET_KEY --repo-id $CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
      --branch $CI_COMMIT_REF_NAME --use-enforcement-rules -o cli -o gitlab_sast
deploy-job:
  stage: deploy
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
sast:
  stage: security
include:
  - template: Security/SAST.gitlab-ci.yml

